// <auto-generated />
using System;
using DespesaViagem.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DespesaViagem.Infra.Migrations
{
    [DbContext(typeof(DespesaViagemContext))]
    partial class DespesaViagemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DespesaViagem.Domain.Models.Core.Records.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("NumeroCasa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Core.Records.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Funcionarios", (string)null);
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Despesas.Despesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDespesa")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoDespesa")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdViagem")
                        .HasColumnType("int");

                    b.Property<string>("NomeDespesa")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TipoDespesa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalDespesa")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdViagem");

                    b.ToTable("Despesas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Viagens.Viagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Adiantamento")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoViagem")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("NomeViagem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusViagem")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar");

                    b.Property<decimal>("TotalDespesas")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("IdFuncionario");

                    b.ToTable("Viagens", (string)null);
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Despesas.DespesaHospedagem", b =>
                {
                    b.HasBaseType("DespesaViagem.Domain.Models.Despesas.Despesa");

                    b.Property<int>("IdEndereco")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeDias")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorDiaria")
                        .HasColumnType("decimal");

                    b.HasIndex("IdEndereco");

                    b.ToTable("DespesasHospedagem", (string)null);
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Despesas.Despesa", b =>
                {
                    b.HasOne("DespesaViagem.Domain.Models.Viagens.Viagem", "Viagem")
                        .WithMany("Despesas")
                        .HasForeignKey("IdViagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Viagem");
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Viagens.Viagem", b =>
                {
                    b.HasOne("DespesaViagem.Domain.Models.Core.Records.Funcionario", "Funcionario")
                        .WithMany("Viagens")
                        .HasForeignKey("IdFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Despesas.DespesaHospedagem", b =>
                {
                    b.HasOne("DespesaViagem.Domain.Models.Despesas.Despesa", null)
                        .WithOne()
                        .HasForeignKey("DespesaViagem.Domain.Models.Despesas.DespesaHospedagem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DespesaViagem.Domain.Models.Core.Records.Endereco", "Endereco")
                        .WithMany("DespesasHospedagem")
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Core.Records.Endereco", b =>
                {
                    b.Navigation("DespesasHospedagem");
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Core.Records.Funcionario", b =>
                {
                    b.Navigation("Viagens");
                });

            modelBuilder.Entity("DespesaViagem.Domain.Models.Viagens.Viagem", b =>
                {
                    b.Navigation("Despesas");
                });
#pragma warning restore 612, 618
        }
    }
}
